// Code generated by protoc-gen-go.
// source: addonlyset.proto
// DO NOT EDIT!

/*
Package addonlyset is a generated protocol buffer package.

It is generated from these files:
	addonlyset.proto

It has these top-level messages:
	AddRequest
	AddReply
	ContainsRequest
	ContainsReply
	ShowRequest
	ShowReply
	SizeRequest
	SizeReply
	AddNodeRequest
	AddNodeReply
	RemoveNodeRequest
	RemoveNodeReply
*/
package addonlyset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AddRequest struct {
	Item             *string `protobuf:"bytes,1,req,name=item" json:"item,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddRequest) Reset()         { *m = AddRequest{} }
func (m *AddRequest) String() string { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()    {}

func (m *AddRequest) GetItem() string {
	if m != nil && m.Item != nil {
		return *m.Item
	}
	return ""
}

type AddReply struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *AddReply) Reset()         { *m = AddReply{} }
func (m *AddReply) String() string { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()    {}

type ContainsRequest struct {
	Item             *string `protobuf:"bytes,1,req,name=item" json:"item,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ContainsRequest) Reset()         { *m = ContainsRequest{} }
func (m *ContainsRequest) String() string { return proto.CompactTextString(m) }
func (*ContainsRequest) ProtoMessage()    {}

func (m *ContainsRequest) GetItem() string {
	if m != nil && m.Item != nil {
		return *m.Item
	}
	return ""
}

type ContainsReply struct {
	InSet            *bool  `protobuf:"varint,1,req,name=inSet" json:"inSet,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ContainsReply) Reset()         { *m = ContainsReply{} }
func (m *ContainsReply) String() string { return proto.CompactTextString(m) }
func (*ContainsReply) ProtoMessage()    {}

func (m *ContainsReply) GetInSet() bool {
	if m != nil && m.InSet != nil {
		return *m.InSet
	}
	return false
}

type ShowRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShowRequest) Reset()         { *m = ShowRequest{} }
func (m *ShowRequest) String() string { return proto.CompactTextString(m) }
func (*ShowRequest) ProtoMessage()    {}

type ShowReply struct {
	Set              []string `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ShowReply) Reset()         { *m = ShowReply{} }
func (m *ShowReply) String() string { return proto.CompactTextString(m) }
func (*ShowReply) ProtoMessage()    {}

func (m *ShowReply) GetSet() []string {
	if m != nil {
		return m.Set
	}
	return nil
}

type SizeRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SizeRequest) Reset()         { *m = SizeRequest{} }
func (m *SizeRequest) String() string { return proto.CompactTextString(m) }
func (*SizeRequest) ProtoMessage()    {}

type SizeReply struct {
	Size             *uint64 `protobuf:"varint,1,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SizeReply) Reset()         { *m = SizeReply{} }
func (m *SizeReply) String() string { return proto.CompactTextString(m) }
func (*SizeReply) ProtoMessage()    {}

func (m *SizeReply) GetSize() uint64 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

type AddNodeRequest struct {
	Addr             *string `protobuf:"bytes,1,req,name=addr" json:"addr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddNodeRequest) Reset()         { *m = AddNodeRequest{} }
func (m *AddNodeRequest) String() string { return proto.CompactTextString(m) }
func (*AddNodeRequest) ProtoMessage()    {}

func (m *AddNodeRequest) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

type AddNodeReply struct {
	Set              []string `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AddNodeReply) Reset()         { *m = AddNodeReply{} }
func (m *AddNodeReply) String() string { return proto.CompactTextString(m) }
func (*AddNodeReply) ProtoMessage()    {}

func (m *AddNodeReply) GetSet() []string {
	if m != nil {
		return m.Set
	}
	return nil
}

type RemoveNodeRequest struct {
	Addr             *string `protobuf:"bytes,1,req,name=addr" json:"addr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RemoveNodeRequest) Reset()         { *m = RemoveNodeRequest{} }
func (m *RemoveNodeRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveNodeRequest) ProtoMessage()    {}

func (m *RemoveNodeRequest) GetAddr() string {
	if m != nil && m.Addr != nil {
		return *m.Addr
	}
	return ""
}

type RemoveNodeReply struct {
	Set              []string `protobuf:"bytes,1,rep,name=set" json:"set,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *RemoveNodeReply) Reset()         { *m = RemoveNodeReply{} }
func (m *RemoveNodeReply) String() string { return proto.CompactTextString(m) }
func (*RemoveNodeReply) ProtoMessage()    {}

func (m *RemoveNodeReply) GetSet() []string {
	if m != nil {
		return m.Set
	}
	return nil
}

func init() {
	proto.RegisterType((*AddRequest)(nil), "addonlyset.AddRequest")
	proto.RegisterType((*AddReply)(nil), "addonlyset.AddReply")
	proto.RegisterType((*ContainsRequest)(nil), "addonlyset.ContainsRequest")
	proto.RegisterType((*ContainsReply)(nil), "addonlyset.ContainsReply")
	proto.RegisterType((*ShowRequest)(nil), "addonlyset.ShowRequest")
	proto.RegisterType((*ShowReply)(nil), "addonlyset.ShowReply")
	proto.RegisterType((*SizeRequest)(nil), "addonlyset.SizeRequest")
	proto.RegisterType((*SizeReply)(nil), "addonlyset.SizeReply")
	proto.RegisterType((*AddNodeRequest)(nil), "addonlyset.AddNodeRequest")
	proto.RegisterType((*AddNodeReply)(nil), "addonlyset.AddNodeReply")
	proto.RegisterType((*RemoveNodeRequest)(nil), "addonlyset.RemoveNodeRequest")
	proto.RegisterType((*RemoveNodeReply)(nil), "addonlyset.RemoveNodeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for AddOnlySet service

type AddOnlySetClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error)
	Contains(ctx context.Context, in *ContainsRequest, opts ...grpc.CallOption) (*ContainsReply, error)
	Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowReply, error)
	Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeReply, error)
	AddNodeAddr(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeReply, error)
	RemoveNodeAddr(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeReply, error)
}

type addOnlySetClient struct {
	cc *grpc.ClientConn
}

func NewAddOnlySetClient(cc *grpc.ClientConn) AddOnlySetClient {
	return &addOnlySetClient{cc}
}

func (c *addOnlySetClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/addonlyset.AddOnlySet/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addOnlySetClient) Contains(ctx context.Context, in *ContainsRequest, opts ...grpc.CallOption) (*ContainsReply, error) {
	out := new(ContainsReply)
	err := grpc.Invoke(ctx, "/addonlyset.AddOnlySet/Contains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addOnlySetClient) Show(ctx context.Context, in *ShowRequest, opts ...grpc.CallOption) (*ShowReply, error) {
	out := new(ShowReply)
	err := grpc.Invoke(ctx, "/addonlyset.AddOnlySet/Show", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addOnlySetClient) Size(ctx context.Context, in *SizeRequest, opts ...grpc.CallOption) (*SizeReply, error) {
	out := new(SizeReply)
	err := grpc.Invoke(ctx, "/addonlyset.AddOnlySet/Size", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addOnlySetClient) AddNodeAddr(ctx context.Context, in *AddNodeRequest, opts ...grpc.CallOption) (*AddNodeReply, error) {
	out := new(AddNodeReply)
	err := grpc.Invoke(ctx, "/addonlyset.AddOnlySet/AddNodeAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addOnlySetClient) RemoveNodeAddr(ctx context.Context, in *RemoveNodeRequest, opts ...grpc.CallOption) (*RemoveNodeReply, error) {
	out := new(RemoveNodeReply)
	err := grpc.Invoke(ctx, "/addonlyset.AddOnlySet/RemoveNodeAddr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AddOnlySet service

type AddOnlySetServer interface {
	Add(context.Context, *AddRequest) (*AddReply, error)
	Contains(context.Context, *ContainsRequest) (*ContainsReply, error)
	Show(context.Context, *ShowRequest) (*ShowReply, error)
	Size(context.Context, *SizeRequest) (*SizeReply, error)
	AddNodeAddr(context.Context, *AddNodeRequest) (*AddNodeReply, error)
	RemoveNodeAddr(context.Context, *RemoveNodeRequest) (*RemoveNodeReply, error)
}

func RegisterAddOnlySetServer(s *grpc.Server, srv AddOnlySetServer) {
	s.RegisterService(&_AddOnlySet_serviceDesc, srv)
}

func _AddOnlySet_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlySetServer).Add(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AddOnlySet_Contains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ContainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlySetServer).Contains(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AddOnlySet_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlySetServer).Show(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AddOnlySet_Size_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(SizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlySetServer).Size(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AddOnlySet_AddNodeAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(AddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlySetServer).AddNodeAddr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _AddOnlySet_RemoveNodeAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(RemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(AddOnlySetServer).RemoveNodeAddr(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _AddOnlySet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "addonlyset.AddOnlySet",
	HandlerType: (*AddOnlySetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _AddOnlySet_Add_Handler,
		},
		{
			MethodName: "Contains",
			Handler:    _AddOnlySet_Contains_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _AddOnlySet_Show_Handler,
		},
		{
			MethodName: "Size",
			Handler:    _AddOnlySet_Size_Handler,
		},
		{
			MethodName: "AddNodeAddr",
			Handler:    _AddOnlySet_AddNodeAddr_Handler,
		},
		{
			MethodName: "RemoveNodeAddr",
			Handler:    _AddOnlySet_RemoveNodeAddr_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
